{"version":3,"sources":["utils/boardUtils.ts","constants/constants.ts","components/Tiles/Tile.tsx","components/Tiles/TilesList.tsx","components/Button/Button.tsx","components/Board/GameResult.tsx","components/Board/Board.tsx","components/Board/BoardProvider.tsx","components/Board/BoardContainer.tsx","components/GameHeader/GameHeader.tsx","hooks/useLocalStorage.ts","components/Game/Game.tsx","components/App/App.tsx","reportWebVitals.ts","index.tsx"],"names":["INDICES","areTilesEqual","t1","t2","Object","keys","length","every","p","shiftHorizontally","line","direction","shift","v","positionY","position","shiftVertically","positionX","getColumn","setColumn","result","JSON","parse","stringify","sort","v1","v2","startPosition","i","reverse","value","j","generateBoard","tilesCount","tiles","createRandomTile","getCoordinates","Math","floor","random","coordinates","isExists","id","getNextId","type","some","x","getRow","row","filter","column","getMaxId","max","apply","map","MOVES_MAP","flat","ScreenSizeBreakpoint","TilesScreenTransformFactor","KEYBOARD_ARROW_TO_DIRECTION_MAP","ArrowUp","ArrowDown","ArrowRight","ArrowLeft","w","s","d","a","Tile","memo","props","className","style","transform","y","TilesList","factor","TileContainer","useState","calcFactor","setFactor","useEffect","handleResize","window","addEventListener","removeEventListener","sortedTiles","innerWidth","Button","children","onClick","DATA","WIN","message","buttonText","containerClass","GAME_OVER","Result","isWin","onContinue","onRestart","playAfterWin","GameResultContainer","useGameContext","gameState","dispatch","status","BoardGrid","grid","Array","from","rowId","columns","colId","Board","GameResult","BoardProvider","useReducer","boardReducer","initState","boardState","payload","moves","loading","setTimeout","state","action","lastMove","currGameState","nextGameState","slice","Error","startClientX","startClientY","BoardContainer","handleTouchStart","event","touches","startTouch","clientX","clientY","handleTouchEnd","endTouch","changedTouches","endClientX","endClientY","xDiff","yDiff","abs","boardContainer","document","getElementById","GameTitle","GameDescription","GameHeader","_","GAME_ID","useStateReducer","prevState","newState","getInitialValue","key","defaultValue","localStorage","getItem","error","console","log","useGameLocalStorage","reducer","setItem","GameContext","React","createContext","getGameStatus","tilesMap","tilesOnSamePosition","movePossible","arr1","arr2","getCoordinate","isGameOver","tile","isGameWon","gameReducer","move","b1","b2","values","forEach","merge","shouldChangeStatus","GameProvider","handleKeyPress","e","preventDefault","Provider","Game","context","useContext","undefined","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.080c86d5.chunk.js","sourcesContent":["import { Value, Tile, Direction } from \"../components/interfaces\";\n\nconst INDICES = [0, 1, 2, 3];\n\nexport const areEqual = (b1: Tile[], b2: Tile[]) => {\n  return b1.every((x) => b2.some((y) => areTilesEqual(x, y)));\n};\n\nexport const areTilesEqual = (t1: Tile, t2: Tile): boolean => {\n  return (\n    (t1 === null && t2 === null) ||\n    ((t1 && Object.keys(t1)?.length) === (t2 && Object.keys(t2)?.length) &&\n      Object.keys(t1).every((p) => t1[p] === t2[p]))\n  );\n};\n\nexport const isGameWon = (tiles: Tile[]) => {\n  return tiles.some((tile) => tile.value === 2048);\n};\n\nexport const isGameOver = (tiles: Tile[]) => {\n\n  const tilesOnSamePosition = (tiles: Tile[]) => {\n    const tilesMap = {};\n    for(let i = 0; i< tiles.length; i++){\n      const key = `${tiles[i].positionX}${tiles[i].positionY}`;\n      if(tilesMap[key]){\n        return true;\n      }\n      tilesMap[key] = true;\n    }\n\n    return false;\n  }\n\n  if (tiles.length < 16 || tilesOnSamePosition(tiles)) {\n    return false;\n  }\n\n  const movePossible = (\n    arr1: Tile[],\n    arr2: Tile[],\n    getCoordinate: (x: Tile) => number\n  ) => {\n    return arr1.some((x) =>\n      arr2.some(\n        (y) => getCoordinate(x) === getCoordinate(y) && x.value === y.value\n      )\n    );\n  };\n\n  for (let i = 0; i < 3; i++) {\n    if (\n      movePossible(\n        getRow(tiles, i),\n        getRow(tiles, i + 1),\n        (x: Tile) => x.positionY\n      ) ||\n      movePossible(\n        getColumn(tiles, i),\n        getColumn(tiles, i + 1),\n        (x: Tile) => x.positionX\n      )\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nexport const merge = (tiles: Tile[]): Tile[] => {\n  let id = getNextId(tiles);\n  let values: { [key: string]: Tile } = {};\n\n  tiles.forEach((v) => {\n    const key = `${v.positionX}${v.positionY}`;\n    if (values[key]) {\n      const value = (v.value * 2) as Value;\n      values[key] = { ...v, id: id++, value, type: \"merged\" };\n    } else {\n      values[key] = v;\n    }\n  });\n\n  return Object.values(values);\n};\n\nexport const moveRight = (tiles: Tile[]): Tile[] => {\n  return INDICES.map((i) =>\n    shiftHorizontally(getRow(tiles, i), \"right\")\n  ).flat();\n};\n\nexport const moveLeft = (tiles: Tile[]): Tile[] => {\n  return INDICES.map((i) => shiftHorizontally(getRow(tiles, i), \"left\")).flat();\n};\n\nexport const moveUp = (tiles: Tile[]): Tile[] => {\n  return INDICES.map((i) =>\n    shiftVertically(getColumn(tiles, i), \"left\")\n  ).flat();\n};\n\nexport const moveDown = (tiles: Tile[]): Tile[] => {\n  return INDICES.map((i) =>\n    shiftVertically(getColumn(tiles, i), \"right\")\n  ).flat();\n};\n\nconst shiftHorizontally = (line: Tile[], direction: Direction): Tile[] => {\n  return shift(\n    line,\n    (v: Tile) => v.positionY,\n    (v: Tile, position: number) => (v.positionY = position),\n    direction\n  );\n};\n\nconst shiftVertically = (line: Tile[], direction: Direction): Tile[] => {\n  return shift(\n    line,\n    (v: Tile) => v.positionX,\n    (v: Tile, position: number) => (v.positionX = position),\n    direction\n  );\n};\n\nconst shift = (\n  line: Tile[],\n  getColumn: (v: Tile) => number,\n  setColumn: (v: Tile, position: number) => void,\n  direction: Direction\n): Tile[] => {\n  if (line.length === 0) {\n    return [];\n  }\n  let result: Tile[] = JSON.parse(JSON.stringify(line));\n  result.sort((v1, v2) => getColumn(v1) - getColumn(v2));\n\n  const startPosition = direction === \"left\" ? 0 : 4 - result.length;\n  for (let i = 0; i < result.length; i++) {\n    setColumn(result[i], startPosition + i);\n  }\n\n  direction === \"left\" && result.reverse();\n  let i = result.length - 1;\n  while (i >= 1) {\n    if (result[i].value === result[i - 1].value && result[i].value !== 2048) {\n      for (let j = 0; j <= i - 1; j++) {\n        const shift = direction === \"right\" ? 1 : -1;\n        setColumn(result[j], getColumn(result[j]) + shift);\n      }\n      i -= 2;\n      continue;\n    }\n\n    i--;\n  }\n\n  return result;\n};\n\nexport const generateBoard = (tilesCount: number = 2): Tile[] => {\n  let tiles = [];\n  while (tilesCount > 0) {\n    tiles = [...tiles, createRandomTile(tiles)];\n    tilesCount--;\n  }\n\n  return tiles;\n};\n\nexport const createRandomTile = (tiles: Tile[]): Tile => {\n  const getCoordinates = (position: number): [number, number] => {\n    const x = Math.floor(position / 4);\n    const y = position % 4;\n    return [x, y];\n  };\n\n  Math.floor(Math.random() * 16);\n\n  let position = Math.floor(Math.random() * 16);\n  let coordinates = getCoordinates(position);\n  while (isExists(tiles, ...coordinates)) {\n    position = position === 15 ? 0 : position + 1;\n    coordinates = getCoordinates(position);\n  }\n\n  const value: Value = Math.random() <= 0.2 ? 4 : 2;\n\n  return {\n    id: getNextId(tiles),\n    value,\n    type: \"new\",\n    positionX: coordinates[0],\n    positionY: coordinates[1],\n  };\n};\n\nconst isExists = (\n  tiles: Tile[],\n  positionX: number,\n  positionY: number\n): boolean => {\n  return tiles.some(\n    (x) => x.positionX === positionX && x.positionY === positionY\n  );\n};\n\nexport const getRow = (tiles: Tile[], row: number): Array<Tile> =>\n  tiles.filter((x) => x.positionX === row);\n\nexport const getColumn = (tiles: Tile[], column: number): Array<Tile> =>\n  tiles.filter((x) => x.positionY === column);\n\nexport const getNextId = (tiles: Tile[]): number => {\n  return getMaxId(tiles) + 1;\n};\n\n// Returns the maximum id of the given tiles.\nexport const getMaxId = (tiles: Tile[]): number => {\n  return Math.max.apply(Math, [0, ...tiles.map((x) => x.id)]);\n};\n\nexport const MOVES_MAP: {[key: string]: Function } = {\n  \"up\": moveUp,\n  \"down\": moveDown,\n  \"right\": moveRight,\n  \"left\": moveLeft,\n};\n","import { Direction, TransformFactor } from \"../components/interfaces\";\n\n/*\nSize XS screen: Up to 420 pixels\nSize S screen: Between 421 pixels and 520 pixels\n*/\nexport const ScreenSizeBreakpoint = {\n  XS: 420,\n  S: 520,\n};\n\n/*\nTiles XS Translation Factor: translates with factor 72.6\nTiles S Translation Factor: translates with factor 96.8\nTiles M Translation Factor: translates with factor 121\n*/\nexport const TilesScreenTransformFactor: { [key: string]: TransformFactor } = {\n  XS: 73,\n  S: 97,\n  M: 121,\n};\n\nexport const KEYBOARD_ARROW_TO_DIRECTION_MAP: { [key: string]: Direction } = {\n  ArrowUp: \"up\",\n  ArrowDown: \"down\",\n  ArrowRight: \"right\",\n  ArrowLeft: \"left\",\n  w: \"up\",\n  s: \"down\",\n  d: \"right\",\n  a: \"left\",\n};\n","import React, { memo } from \"react\";\nimport { TileType, Value } from \"../interfaces\";\n\nimport \"./Tile.scss\";\n\ninterface TileProps {\n  value: Value;\n  type: TileType\n  x: number;\n  y: number;\n}\n\nconst Tile = memo((props: TileProps) => {\n\n  return (\n    <div\n      className={`tile tile-${props.value}`}\n      style={{ transform: `translate(${props.x}px, ${props.y}px)` }}\n    >\n      <div className={`tileInner ${props.type}`}>{props.value}</div>\n    </div>\n  );\n});\n\nexport default Tile;","import React, { useEffect, useState } from \"react\";\nimport { ScreenSizeBreakpoint, TilesScreenTransformFactor } from \"../../constants/constants\";\nimport { Tile, TransformFactor } from \"../interfaces\";\nimport {default as BoardTile} from \"./Tile\";\n\nimport \"./TilesList.scss\";\n\nconst TilesList = (props: { tiles: Tile[], factor: number }) => {\n  return (\n    <div>\n      {props.tiles.map((x) => (\n        <BoardTile\n          key={x.id}\n          value={x.value}\n          type={x.type}\n          x={x.positionY * props.factor}\n          y={x.positionX * props.factor}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport const TileContainer = (props: { tiles: Tile[] }) => {\n\n  const [factor, setFactor] = useState<TransformFactor>(calcFactor());\n\n  useEffect(() => {\n    const handleResize = () => {\n      setFactor(calcFactor());\n    };\n\n    window.addEventListener(\"resize\", handleResize);\n\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  const sortedTiles = props.tiles.sort((t1, t2) => t1.id - t2.id);\n  return (\n    <div className=\"tileContainer\">\n      <TilesList tiles={sortedTiles} factor={factor}/>\n    </div>\n  );\n};\n\nconst calcFactor = () => {\n  if (window.innerWidth <= ScreenSizeBreakpoint.XS) {\n    return TilesScreenTransformFactor.XS;\n  }\n  if (window.innerWidth <= ScreenSizeBreakpoint.S) {\n    return TilesScreenTransformFactor.S;\n  }\n\n  return TilesScreenTransformFactor.M;\n};","import React from \"react\";\n\nimport \"./Button.scss\";\n\ninterface ButtonProps {\n  id?: string;\n  children: React.ReactNode;\n  className?: string;\n  onClick: (event: React.MouseEvent<HTMLButtonElement>) => void;\n}\n\nexport const Button = (props: ButtonProps) => {\n  const { id, children, className, onClick } = props;\n\n  return (\n    <button\n      id={id}\n      className={`appButton ${className || \"\"}`}\n      onClick={onClick}\n    >\n      {children}\n    </button>\n  );\n};\n","import React from \"react\";\nimport Button from \"../Button\";\nimport { useGameContext } from \"../Game\";\nimport { GameStatus, Tile } from \"../interfaces\";\n\nconst DATA = {\n  WIN: {\n    message: \"Congratulations! You Win!\",\n    buttonText: \"Play again\",\n    containerClass: \"gameResultWin\",\n  },\n  GAME_OVER: {\n    message: \"Game Over!\",\n    buttonText: \"Try again\",\n    containerClass: \"gameResultLose\",\n  },\n};\n\nconst Result = (props: {\n  isWin: boolean;\n  onContinue: () => void;\n  onRestart: () => void;\n  playAfterWin: boolean;\n  status: GameStatus;\n}) => {\n  const { isWin, onContinue, onRestart, playAfterWin } = props;\n  const { message, buttonText, containerClass } =\n    isWin || playAfterWin ? DATA.WIN : DATA.GAME_OVER;\n\n  return (\n    <div className={`gameResult ${containerClass}`}>\n      <p>{message}</p>\n      <div>\n        {isWin && (\n          <Button className=\"continueButton\" onClick={() => onContinue()}>\n            Continue\n          </Button>\n        )}\n        <Button onClick={() => onRestart()}>{buttonText}</Button>\n      </div>\n    </div>\n  );\n};\n\nconst GameResultContainer = (props: { tiles: Tile[] }) => {\n  const { gameState, dispatch } = useGameContext();\n\n  const { status } = gameState;\n\n  const handleContinue = () => {\n    dispatch({ type: \"continue\" });\n  };\n\n  const handleRestart = () => {\n    dispatch({ type: \"restart\" });\n  };\n\n  const playAfterWin = props.tiles.some((x) => x.value === 2048);\n  return (\n    <>\n      {status !== \"IN_PROGRESS\" && status !== \"PLAY_AFTER_WIN\" && (\n        <Result\n          isWin={status === \"WIN\"}\n          playAfterWin={playAfterWin}\n          onRestart={handleRestart}\n          onContinue={handleContinue}\n          status={status}\n        />\n      )}\n    </>\n  );\n};\n\nexport default GameResultContainer;\n","import React from \"react\";\nimport { Tile } from \"../interfaces\";\nimport Tiles from \"../Tiles\";\nimport GameResult from \"./GameResult\";\n\nconst BoardGrid = () => {\n  const grid = Array.from(Array(4).keys()).map((rowId) => {\n    const columns = Array.from(Array(4).keys()).map((colId) => (\n      <div key={colId} className=\"cell\"></div>\n    ));\n    return (\n      <div key={rowId} className=\"row\">\n        {columns}\n      </div>\n    );\n  });\n\n  return <div className=\"gridContainer\">{grid}</div>;\n};\n\nconst Board = (props: { tiles: Tile[] }) => {\n\n  return (\n    <div id=\"boardContainer\">\n      <GameResult tiles={props.tiles} />\n      <BoardGrid />\n      <Tiles tiles={props.tiles} />\n    </div>\n  );\n};\n\nexport default Board;\n","import React, { useEffect, useReducer } from \"react\";\nimport { MOVES_MAP } from \"../../utils/boardUtils\";\nimport { useGameContext } from \"../Game/Game\";\nimport { GameState } from \"../interfaces\";\nimport Board from \"./Board\";\n\nimport \"./Board.scss\";\nimport { BoardActionType, BoardState } from \"./Interfaces\";\n\nexport const BoardProvider = () => {\n  const { gameState } = useGameContext();\n\n  const [boardState, dispatch] = useReducer(boardReducer, initState());\n  \n  useEffect(() => {\n    dispatch({ type: \"addMove\", payload: gameState });\n  }, [gameState]);\n\n  useEffect(() => {\n    if (boardState.moves.length < 2 || boardState.loading) {\n      return;\n    }\n\n    dispatch({ type: \"startMove\" });\n\n    setTimeout(() => {\n      dispatch({\n        type: \"endMove\",\n      });\n    }, 100);\n\n  }, [boardState]);\n\n  return <Board tiles={boardState.tiles} />;\n};\n\nfunction boardReducer(state: BoardState, action: BoardActionType): BoardState {\n  switch (action.type) {\n    case \"addMove\": {\n      const isNewGame = !action.payload.lastMove;\n      if (isNewGame || state.tiles.length === 0) {\n        return initState(action.payload);\n      }\n\n      return {\n        ...state,\n        moves: [...state.moves, action.payload],\n      };\n    }\n    case \"startMove\": {\n      const currGameState = state.moves[0];\n      const nextGameState = state.moves[1];\n      const tiles = MOVES_MAP[nextGameState.lastMove](currGameState.tiles);\n\n      return { ...state, loading: true, tiles };\n    }\n    case \"endMove\": {\n      const nextGameState = state.moves[1];\n      return {\n        moves: state.moves.slice(1),\n        loading: false,\n        tiles: nextGameState.tiles,\n      };\n    }\n    default: {\n      throw new Error(`Unhandled action: ${action}`);\n    }\n  }\n}\n\nconst initState = (gameState?: GameState): BoardState => {\n  if (gameState) {\n    return { moves: [gameState], loading: false, tiles: gameState.tiles };\n  }\n  return { moves: [], loading: false, tiles: [] };\n};\n","import React, { useEffect } from \"react\";\nimport { useGameContext } from \"../Game\";\nimport { BoardProvider } from \"./BoardProvider\";\n\nlet startClientX = null;\nlet startClientY = null;\n\nexport const BoardContainer = () => {\n  const { dispatch } = useGameContext();\n\n  useEffect(() => {\n    function handleTouchStart(event) {\n      if (event.touches.length === 1) {\n        const startTouch = event.touches[0];\n        startClientX = startTouch.clientX;\n        startClientY = startTouch.clientY;\n      }\n    }\n\n    function handleTouchEnd(event) {\n      if (!startClientX || !startClientY || event.touches.length > 0) {\n        return;\n      }\n    \n      const endTouch = event.changedTouches[0];\n      var endClientX = endTouch.clientX;\n      var endClientY = endTouch.clientY;\n    \n      var xDiff = startClientX - endClientX;\n      var yDiff = startClientY - endClientY;\n    \n      if (Math.abs(xDiff) > Math.abs(yDiff)) {\n        if (xDiff < 0) {\n          /* right swipe */\n          dispatch({ type: \"move\", payload: \"right\" });\n        } else {\n          /* left swipe */\n          dispatch({ type: \"move\", payload: \"left\" });\n        }\n      } else {\n        if (yDiff < 0) {\n          /* down swipe */\n          dispatch({ type: \"move\", payload: \"down\" });\n        } else {\n          /* up swipe */\n          dispatch({ type: \"move\", payload: \"up\" });\n        }\n      }\n      /* reset values */\n      startClientX = null;\n      startClientY = null;\n    }\n\n    const boardContainer = document.getElementById(\"boardContainer\");\n    boardContainer.addEventListener(\"touchstart\", handleTouchStart);\n    boardContainer.addEventListener('touchend', handleTouchEnd);\n\n    return () => {\n      boardContainer.removeEventListener(\"touchstart\", handleTouchStart);\n      boardContainer.removeEventListener(\"touchend\", handleTouchEnd);\n    };\n  }, [dispatch]);\n\n  return <BoardProvider />;\n};\n","import React from \"react\";\nimport Button from \"../Button\";\nimport { useGameContext } from \"../Game\";\nimport ScoresContainer from \"../ScoresContainer\";\n\nimport \"./GameHeader.scss\";\n\nconst GameTitle = () => <span className=\"gameTitle\">2048</span>;\n\nconst GameDescription = () => {\n  return (\n    <div>\n      <span>Join the numbers to get <b>2048</b>!</span>\n      <br />\n      {/* <a href=\"#howToPlaySection\">How to play →</a> */}\n    </div>\n  );\n};\n\nexport const GameHeader = () => {\n  const { dispatch } = useGameContext();\n\n  return (\n    <div className=\"header\">\n      <div className=\"gameIntro\">\n        <GameTitle />\n        <GameDescription />\n      </div>\n      <div className=\"actions\">\n        {/* <ScoresContainer /> */}\n        <Button\n          id=\"restartGameBtn\"\n          onClick={(_) => dispatch({ type: \"restart\" })}\n        >\n          New Game\n        </Button>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useReducer } from \"react\";\n\nconst GAME_ID = \"2048-game\";\n\nconst useStateReducer = (prevState, newState) => {\n  return typeof newState === \"function\" ? newState(prevState) : newState;\n};\n\nconst getInitialValue = (key: string, defaultValue: any) => {\n  try {\n    const gameState = JSON.parse(window.localStorage.getItem(GAME_ID));\n    const value = gameState?.[key];\n    return value ?? defaultValue;\n  } catch (error) {\n    console.log(error);\n    return defaultValue;\n  }\n};\n\nfunction useGameLocalStorage<T>(\n  key: string,\n  defaultValue: T,\n  reducer = useStateReducer\n): [T, React.Dispatch<any>] {\n  const [value, dispatch] = useReducer(\n    reducer,\n    getInitialValue(key, defaultValue)\n  );\n\n  useEffect(() => {\n    let state = JSON.parse(window.localStorage.getItem(GAME_ID)) || {};\n    state[key] = value;\n    window.localStorage.setItem(GAME_ID, JSON.stringify(state));\n  }, [value, key]);\n\n  return [value, dispatch];\n}\n\nexport default useGameLocalStorage;\n","import React, { useContext, useEffect } from \"react\";\nimport Board from \"../Board\";\n\nimport \"./Game.scss\";\nimport {\n  areEqual,\n  createRandomTile,\n  generateBoard,\n  isGameOver,\n  isGameWon,\n  merge,\n  MOVES_MAP,\n} from \"../../utils/boardUtils\";\nimport GameHeader from \"../GameHeader\";\nimport {\n  GameContextActionType,\n  GameState,\n  IGameContext,\n  Direction,\n  Tile,\n  GameStatus\n} from \"../interfaces\";\nimport GameFooter from \"../GameFooter\";\nimport useGameLocalStorage from \"../../hooks/useLocalStorage\";\nimport { KEYBOARD_ARROW_TO_DIRECTION_MAP } from \"../../constants/constants\";\n\nconst GameContext = React.createContext<IGameContext>(null);\n\nconst getGameStatus = (tiles: Tile[]): GameStatus => {\n  if (isGameOver(tiles)) {\n    return \"GAME_OVER\";\n  }\n\n  if (isGameWon(tiles)) {\n    return \"WIN\";\n  }\n\n  return \"IN_PROGRESS\";\n};\n\nconst initState = (tilesCount = 2): GameState => {\n  return {\n    tiles: generateBoard(tilesCount),\n    lastMove: null,\n    status: \"IN_PROGRESS\",\n  };\n};\n\nfunction gameReducer(state: GameState, action: GameContextActionType) {\n  switch (action.type) {\n    case \"restart\": {\n      return initState();\n    }\n    case \"continue\": {\n      return { ...state, status: \"PLAY_AFTER_WIN\" };\n    }\n    case \"move\": {\n      const move = MOVES_MAP[action.payload];\n      let tiles: Tile[] = move(state.tiles);\n      if (areEqual(state.tiles, tiles)) {\n        return state;\n      }\n\n      tiles = merge(tiles);\n      tiles = [...tiles, createRandomTile(tiles)];\n      const status = getGameStatus(tiles);\n      const shouldChangeStatus =\n        state.status !== \"PLAY_AFTER_WIN\" || status === \"GAME_OVER\";\n\n      return {\n        tiles,\n        lastMove: action.payload,\n        status: shouldChangeStatus ? status : state.status,\n      };\n    }\n    default: {\n      throw new Error(`Unhandled action: ${action}`);\n    }\n  }\n}\n\nconst GameProvider = (props) => {\n  const [state, dispatch] = useGameLocalStorage<GameState>(\n    \"game\",\n    initState(),\n    gameReducer\n  );\n\n  useEffect(() => {\n    const handleKeyPress = (e: KeyboardEvent) => {\n      e.preventDefault();\n      const direction: Direction | undefined =\n        KEYBOARD_ARROW_TO_DIRECTION_MAP[e.key];\n      if (direction) {\n        dispatch({ type: \"move\", payload: direction });\n      }\n    };\n\n    document.addEventListener(\"keydown\", handleKeyPress);\n\n    return () => {\n      document.removeEventListener(\"keydown\", handleKeyPress);\n    };\n  }, [dispatch]);\n\n  return (\n    <GameContext.Provider value={{ gameState: state, dispatch }}>\n      {props.children}\n    </GameContext.Provider>\n  );\n};\n\nconst Game = () => {\n  return (\n    <GameProvider>\n      <div className=\"container\">\n        <div className=\"gameContainer\">\n          <GameHeader />\n          <Board />\n        </div>\n        {/* <GameFooter /> */}\n      </div>\n    </GameProvider>\n  );\n};\n\nfunction useGameContext() {\n  const context = useContext(GameContext);\n  if (context === undefined) {\n    throw new Error(\"useGameContext must be used within a GameContextProvider\");\n  }\n  return context;\n}\n\nexport { Game, useGameContext };\n","import React from 'react';\nimport Game from '../Game';\n\nfunction App() {\n  return (\n    <div>\n      <main>\n        <Game />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}